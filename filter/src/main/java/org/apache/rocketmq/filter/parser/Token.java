/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Generated By:JavaCC: Do not edit this line. Token.java Version 5.0 */
/* JavaCCOptions:TOKEN_EXTENDS=,KEEP_LINE_COL=null,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.apache.rocketmq.filter.parser;

/**
 * Describes the input token stream.
 */
//
public class Token implements java.io.Serializable {

    /**
     * The version identifier for this Serializable class.
     * Increment only if the <i>serialized</i> form of the
     * class changes.
     */
    private static final long serialVersionUID = 1L;

    /**
     * An integer that describes the kind of this token.  This numbering
     * system is determined by JavaCCParser, and a table of these numbers is
     * stored in the file ...Constants.java.描述这种令牌的整数。这个编号系统由JavaCCParser确定，这些编号的表格存储在文件中…Constants.java。
     */
    public int kind;

    /**
     * The line number of the first character of this Token.这个令牌的第一个字符的行号。
     */
    public int beginLine;
    /**
     * The column number of the first character of this Token.此令牌的第一个字符的列号。
     */
    public int beginColumn;
    /**
     * The line number of the last character of this Token.这个令牌的最后一个字符的行号。
     */
    public int endLine;
    /**
     * The column number of the last character of this Token.此令牌的最后一个字符的列号。
     */
    public int endColumn;

    /**
     * The string image of the token.令牌的字符串图像。
     */
    public String image;

    /**
     * A reference to the next regular (non-special) token from the input
     * stream.  If this is the last token from the input stream, or if the
     * token manager has not read tokens beyond this one, this field is
     * set to null.  This is true only if this token is also a regular
     * token.  Otherwise, see below for a description of the contents of
     * this field.对输入流中的下一个常规(非特殊)令牌的引用。如果这是输入流中的最后一个令牌，或者令牌管理器没有读取这个以外的令牌，则该字段设置为null。只有当此令牌也是常规令牌时才为真。否则，请参阅下面对该字段内容的描述。
     */
    public Token next;

    /**
     * This field is used to access special tokens that occur prior to this
     * token, but after the immediately preceding regular (non-special) token.
     * If there are no such special tokens, this field is set to null.
     * When there are more than one such special token, this field refers
     * to the last of these special tokens, which in turn refers to the next
     * previous special token through its specialToken field, and so on
     * until the first special token (whose specialToken field is null).
     * The next fields of special tokens refer to other special tokens that
     * immediately follow it (without an intervening regular token).  If there
     * is no such token, this field is null.此字段用于访问在此令牌之前但在前一个常规(非特殊)令牌之后出现的特殊令牌。如果没有这样特殊的令牌，则将该字段设置为null。当有多个这样的特殊令牌时，该字段引用这些特殊令牌中的最后一个，然后通过其specialToken字段引用上一个特殊令牌，以此类推，直到第一个特殊令牌(其specialToken字段为null)。特殊令牌的下一个字段引用紧跟其后的其他特殊令牌(没有插入常规令牌)。如果没有这样的标记，该字段为空。
     */
    public Token specialToken;

    /**
     * An optional attribute value of the Token.
     * Tokens which are not used as syntactic sugar will often contain
     * meaningful values that will be used later on by the compiler or
     * interpreter. This attribute value is often different from the image.
     * Any subclass of Token that actually wants to return a non-null value can
     * override this method as appropriate.令牌的可选属性值。不用作语法糖的标记通常包含有意义的值，编译器或解释器稍后将使用这些值。这个属性值通常与图像不同。实际上想要返回非空值的任何令牌子类都可以在适当的时候重写此方法。
     */
    public Object getValue() {
        return null;
    }

    /**
     * No-argument constructor
     */
    public Token() {
    }

    /**
     * Constructs a new token for the specified Image.
     */
    public Token(int kind) {
        this(kind, null);
    }

    /**
     * Constructs a new token for the specified Image and Kind.
     */
    public Token(int kind, String image) {
        this.kind = kind;
        this.image = image;
    }

    /**
     * Returns the image.
     */
    public String toString() {
        return image;
    }

    /**
     * Returns a new Token object, by default. However, if you want, you
     * can create and return subclass objects based on the value of ofKind.
     * Simply add the cases to the switch for all those special cases.
     * For example, if you have a subclass of Token called IDToken that
     * you want to create if ofKind is ID, simply add something like :
     * <p/>
     * case MyParserConstants.ID : return new IDToken(ofKind, image);
     * <p/>
     * to the following switch statement. Then you can cast matchedToken
     * variable to the appropriate type and use sit in your lexical actions.
     * 默认情况下，返回一个新的令牌对象。但是，如果您愿意，您可以基于ofKind的值创建和返回子类对象。简单地为所有这些特殊情况添加案例到交换机。例如，如果您有一个名为IDToken的令牌子类，如果ofKind是ID，那么只需添加如下内容:

     MyParserConstants。ID:返回新的IDToken(ofKind, image);

     到下面的switch语句。然后，您可以将matchedToken变量转换为适当的类型，并在您的词汇操作中使用sit。
     */
    public static Token newToken(int ofKind, String image) {
        switch (ofKind) {
            default:
                return new Token(ofKind, image);
        }
    }

    public static Token newToken(int ofKind) {
        return newToken(ofKind, null);
    }

}
/* JavaCC - OriginalChecksum=6b0af88eb45a551d929d3cdd9582f827 (do not edit this line) */
